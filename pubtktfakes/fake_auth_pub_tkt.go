// Code generated by counterfeiter. DO NOT EDIT.
package pubtktfakes

import (
	"net/http"
	"sync"

	"github.com/orange-cloudfoundry/go-auth-pubtkt"
)

type FakeAuthPubTkt struct {
	VerifyFromRequestStub        func(*http.Request) (*pubtkt.Ticket, error)
	verifyFromRequestMutex       sync.RWMutex
	verifyFromRequestArgsForCall []struct {
		arg1 *http.Request
	}
	verifyFromRequestReturns struct {
		result1 *pubtkt.Ticket
		result2 error
	}
	verifyFromRequestReturnsOnCall map[int]struct {
		result1 *pubtkt.Ticket
		result2 error
	}
	RequestToTicketStub        func(*http.Request) (*pubtkt.Ticket, error)
	requestToTicketMutex       sync.RWMutex
	requestToTicketArgsForCall []struct {
		arg1 *http.Request
	}
	requestToTicketReturns struct {
		result1 *pubtkt.Ticket
		result2 error
	}
	requestToTicketReturnsOnCall map[int]struct {
		result1 *pubtkt.Ticket
		result2 error
	}
	RawToTicketStub        func(ticketStr string) (*pubtkt.Ticket, error)
	rawToTicketMutex       sync.RWMutex
	rawToTicketArgsForCall []struct {
		ticketStr string
	}
	rawToTicketReturns struct {
		result1 *pubtkt.Ticket
		result2 error
	}
	rawToTicketReturnsOnCall map[int]struct {
		result1 *pubtkt.Ticket
		result2 error
	}
	VerifyTicketStub        func(ticket *pubtkt.Ticket, clientIp string) error
	verifyTicketMutex       sync.RWMutex
	verifyTicketArgsForCall []struct {
		ticket   *pubtkt.Ticket
		clientIp string
	}
	verifyTicketReturns struct {
		result1 error
	}
	verifyTicketReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeAuthPubTkt) VerifyFromRequest(arg1 *http.Request) (*pubtkt.Ticket, error) {
	fake.verifyFromRequestMutex.Lock()
	ret, specificReturn := fake.verifyFromRequestReturnsOnCall[len(fake.verifyFromRequestArgsForCall)]
	fake.verifyFromRequestArgsForCall = append(fake.verifyFromRequestArgsForCall, struct {
		arg1 *http.Request
	}{arg1})
	fake.recordInvocation("VerifyFromRequest", []interface{}{arg1})
	fake.verifyFromRequestMutex.Unlock()
	if fake.VerifyFromRequestStub != nil {
		return fake.VerifyFromRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.verifyFromRequestReturns.result1, fake.verifyFromRequestReturns.result2
}

func (fake *FakeAuthPubTkt) VerifyFromRequestCallCount() int {
	fake.verifyFromRequestMutex.RLock()
	defer fake.verifyFromRequestMutex.RUnlock()
	return len(fake.verifyFromRequestArgsForCall)
}

func (fake *FakeAuthPubTkt) VerifyFromRequestArgsForCall(i int) *http.Request {
	fake.verifyFromRequestMutex.RLock()
	defer fake.verifyFromRequestMutex.RUnlock()
	return fake.verifyFromRequestArgsForCall[i].arg1
}

func (fake *FakeAuthPubTkt) VerifyFromRequestReturns(result1 *pubtkt.Ticket, result2 error) {
	fake.VerifyFromRequestStub = nil
	fake.verifyFromRequestReturns = struct {
		result1 *pubtkt.Ticket
		result2 error
	}{result1, result2}
}

func (fake *FakeAuthPubTkt) VerifyFromRequestReturnsOnCall(i int, result1 *pubtkt.Ticket, result2 error) {
	fake.VerifyFromRequestStub = nil
	if fake.verifyFromRequestReturnsOnCall == nil {
		fake.verifyFromRequestReturnsOnCall = make(map[int]struct {
			result1 *pubtkt.Ticket
			result2 error
		})
	}
	fake.verifyFromRequestReturnsOnCall[i] = struct {
		result1 *pubtkt.Ticket
		result2 error
	}{result1, result2}
}

func (fake *FakeAuthPubTkt) RequestToTicket(arg1 *http.Request) (*pubtkt.Ticket, error) {
	fake.requestToTicketMutex.Lock()
	ret, specificReturn := fake.requestToTicketReturnsOnCall[len(fake.requestToTicketArgsForCall)]
	fake.requestToTicketArgsForCall = append(fake.requestToTicketArgsForCall, struct {
		arg1 *http.Request
	}{arg1})
	fake.recordInvocation("RequestToTicket", []interface{}{arg1})
	fake.requestToTicketMutex.Unlock()
	if fake.RequestToTicketStub != nil {
		return fake.RequestToTicketStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.requestToTicketReturns.result1, fake.requestToTicketReturns.result2
}

func (fake *FakeAuthPubTkt) RequestToTicketCallCount() int {
	fake.requestToTicketMutex.RLock()
	defer fake.requestToTicketMutex.RUnlock()
	return len(fake.requestToTicketArgsForCall)
}

func (fake *FakeAuthPubTkt) RequestToTicketArgsForCall(i int) *http.Request {
	fake.requestToTicketMutex.RLock()
	defer fake.requestToTicketMutex.RUnlock()
	return fake.requestToTicketArgsForCall[i].arg1
}

func (fake *FakeAuthPubTkt) RequestToTicketReturns(result1 *pubtkt.Ticket, result2 error) {
	fake.RequestToTicketStub = nil
	fake.requestToTicketReturns = struct {
		result1 *pubtkt.Ticket
		result2 error
	}{result1, result2}
}

func (fake *FakeAuthPubTkt) RequestToTicketReturnsOnCall(i int, result1 *pubtkt.Ticket, result2 error) {
	fake.RequestToTicketStub = nil
	if fake.requestToTicketReturnsOnCall == nil {
		fake.requestToTicketReturnsOnCall = make(map[int]struct {
			result1 *pubtkt.Ticket
			result2 error
		})
	}
	fake.requestToTicketReturnsOnCall[i] = struct {
		result1 *pubtkt.Ticket
		result2 error
	}{result1, result2}
}

func (fake *FakeAuthPubTkt) RawToTicket(ticketStr string) (*pubtkt.Ticket, error) {
	fake.rawToTicketMutex.Lock()
	ret, specificReturn := fake.rawToTicketReturnsOnCall[len(fake.rawToTicketArgsForCall)]
	fake.rawToTicketArgsForCall = append(fake.rawToTicketArgsForCall, struct {
		ticketStr string
	}{ticketStr})
	fake.recordInvocation("RawToTicket", []interface{}{ticketStr})
	fake.rawToTicketMutex.Unlock()
	if fake.RawToTicketStub != nil {
		return fake.RawToTicketStub(ticketStr)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.rawToTicketReturns.result1, fake.rawToTicketReturns.result2
}

func (fake *FakeAuthPubTkt) RawToTicketCallCount() int {
	fake.rawToTicketMutex.RLock()
	defer fake.rawToTicketMutex.RUnlock()
	return len(fake.rawToTicketArgsForCall)
}

func (fake *FakeAuthPubTkt) RawToTicketArgsForCall(i int) string {
	fake.rawToTicketMutex.RLock()
	defer fake.rawToTicketMutex.RUnlock()
	return fake.rawToTicketArgsForCall[i].ticketStr
}

func (fake *FakeAuthPubTkt) RawToTicketReturns(result1 *pubtkt.Ticket, result2 error) {
	fake.RawToTicketStub = nil
	fake.rawToTicketReturns = struct {
		result1 *pubtkt.Ticket
		result2 error
	}{result1, result2}
}

func (fake *FakeAuthPubTkt) RawToTicketReturnsOnCall(i int, result1 *pubtkt.Ticket, result2 error) {
	fake.RawToTicketStub = nil
	if fake.rawToTicketReturnsOnCall == nil {
		fake.rawToTicketReturnsOnCall = make(map[int]struct {
			result1 *pubtkt.Ticket
			result2 error
		})
	}
	fake.rawToTicketReturnsOnCall[i] = struct {
		result1 *pubtkt.Ticket
		result2 error
	}{result1, result2}
}

func (fake *FakeAuthPubTkt) VerifyTicket(ticket *pubtkt.Ticket, clientIp string) error {
	fake.verifyTicketMutex.Lock()
	ret, specificReturn := fake.verifyTicketReturnsOnCall[len(fake.verifyTicketArgsForCall)]
	fake.verifyTicketArgsForCall = append(fake.verifyTicketArgsForCall, struct {
		ticket   *pubtkt.Ticket
		clientIp string
	}{ticket, clientIp})
	fake.recordInvocation("VerifyTicket", []interface{}{ticket, clientIp})
	fake.verifyTicketMutex.Unlock()
	if fake.VerifyTicketStub != nil {
		return fake.VerifyTicketStub(ticket, clientIp)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.verifyTicketReturns.result1
}

func (fake *FakeAuthPubTkt) VerifyTicketCallCount() int {
	fake.verifyTicketMutex.RLock()
	defer fake.verifyTicketMutex.RUnlock()
	return len(fake.verifyTicketArgsForCall)
}

func (fake *FakeAuthPubTkt) VerifyTicketArgsForCall(i int) (*pubtkt.Ticket, string) {
	fake.verifyTicketMutex.RLock()
	defer fake.verifyTicketMutex.RUnlock()
	return fake.verifyTicketArgsForCall[i].ticket, fake.verifyTicketArgsForCall[i].clientIp
}

func (fake *FakeAuthPubTkt) VerifyTicketReturns(result1 error) {
	fake.VerifyTicketStub = nil
	fake.verifyTicketReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeAuthPubTkt) VerifyTicketReturnsOnCall(i int, result1 error) {
	fake.VerifyTicketStub = nil
	if fake.verifyTicketReturnsOnCall == nil {
		fake.verifyTicketReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.verifyTicketReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeAuthPubTkt) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.verifyFromRequestMutex.RLock()
	defer fake.verifyFromRequestMutex.RUnlock()
	fake.requestToTicketMutex.RLock()
	defer fake.requestToTicketMutex.RUnlock()
	fake.rawToTicketMutex.RLock()
	defer fake.rawToTicketMutex.RUnlock()
	fake.verifyTicketMutex.RLock()
	defer fake.verifyTicketMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeAuthPubTkt) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

func (fake *FakeAuthPubTkt) GenerateSignature(ticket *pubtkt.Ticket) (string,error) {
	return "",nil
}

var _ pubtkt.AuthPubTkt = new(FakeAuthPubTkt)
